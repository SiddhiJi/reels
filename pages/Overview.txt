in react.js -> npx create-react-app reels
in next.js -> npx create-next-app reels

To start server-:
in react.js -> cd reels  npm start
in next.js -> code reels(pops up to new vs code window)  npm run dev

in next.js instead of src folder there will be pages folder
index.js runs as html first in pages

index.js itself handles routing and its not necessary to keep every things in src folder we can keep anywhere in next.js like here assets
, not create in pages folder as it would create route of it also

create signup folder and inside it make index.js file similar for login

create a signup.css inside pages folder and dont forget to import in _app.js similar for login make login.css

Mui -> to see props on tags of mui goto bottom and see api section 
    -> variant has 3 options = variant="contained" or "filled" or "outlined"
to add carousel(slider) inside mobile we use react reponsive carousel see on google and install its npm and use by refering syntax

then make components folder inside it make feed.js 

pasting code of navbar from mui -> app bar and installin npm i @mui/icons-material to enable icons used in mui code and removing 
home_module.css and removing fro index.js also

impotrt all css in _app.js 

navbar -: 1. add home and explore icon import from mui to navbar and add its imported tag
             in navbar.js with props like fontSize and for more css add className

firebase -: setup same as prev. trial

            login and signup 
            feed profile pages -> only to be shown to logged in persons

            like to go in feed , first it will check if person is logged in or not, simialr for profile, so its like wall around these pages of check
            so instead of drawing wall around every page we make a wall inside which every page lies.
            So this wall in next or react is called context. thats why we make folder of context, inside which it has auth.js file.
            func. used in authWrapper is from https://firebase.google.com/docs/auth/web/password-auth

            Outermost is _app.js then index.js , so we import wall in _app.js 

Sign up work -:

1. accept all inputs(email, password, full name)
2. upload click -> storage(enale in test-mode from firebase build section) -> image -> link of image
                |-> details in firestore

add this fire storage code taken from firebase upload file , after signup folder-> index.js when in try block its signed up successfully to store
uploaded image from sign up image

Profile -:
we will make a file in component of profile as we want only to loggedin users to see this page


Note -> here we are making folders in pages file so that when they are routed their index.js can run which is inside that folders 
        if only localhost:3000 runs it runs index.js file directly inside pages folder
        and to run any other file directly inside pages folder we name that file with diff. name rather than index.js and use routing link

firestore -: create project in test mode and use func. setDoc in signup->index.js



For deployment -: 1. make strict false in next.cnfig.js  2. then run npm run build and make repo on git


setDoc sets content on db. For dynamic wenpages we will getDoc() stored in db.

to make your own id run npm i uuid